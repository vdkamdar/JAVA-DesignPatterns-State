package airportSecurityState.driver;

import airportSecurityState.airportStates.AirportSecurityFactors;
import airportSecurityState.util.FileProcessor;
import airportSecurityState.util.Occurrences;
import airportSecurityState.util.Results;
import airportSecurityState.util.MyLogger;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.RuntimeException;
import java.lang.NumberFormatException;

public class Driver{
    public static void main(String args[]) throws Exception{
	String inputFile = null;
	String outputFile = null;
	int debugLevel = 0;
	FileProcessor fp_input = null;
	
	try{
	    if(args.length == 3){
		inputFile = args[0];
		outputFile = args[1];
		if(args[2].matches(".*[0-4].*")){
		    debugLevel = Integer.parseInt(args[2]);
		}
		else{
		    throw new IllegalArgumentException("The argument "+args[2]+" is invalid. Please enter debug level between 0 and 4.");
		}
	    }
	    else{
		throw new RuntimeException("Two arguments expected!");
	    }
	}
	catch (Exception e){
	    System.err.println("Invalid argument");
	    e.printStackTrace();
	    System.exit(1);
	}

	MyLogger.setDebugValue(debugLevel);

	try{
	    fp_input = new FileProcessor(inputFile);
	}
	catch(Exception e){
	    System.err.println("File not found!");
	    e.printStackTrace();
	    System.exit(1);
	}

	int index = 0;
	String line = null;
	ArrayList<String[]> travellers = new ArrayList<String[]>();
	String[] traveller_information = new String[4];
	String[] temp = new String[3];
	Occurrences occurrences = new Occurrences();
	AirportSecurityFactors securityFactors = new AirportSecurityFactors(1,1,1);
	Results results = new Results(outputFile);
	results.initializeOperations();
		
	while((line = fp_input.readLine()) != null){
	    traveller_information = line.split(";");
	    
	    temp = traveller_information[0].split(":");
	    traveller_information[0] = temp[1];

	    temp = traveller_information[1].split(":");
	    traveller_information[1] = temp[1]+":"+temp[2];

	    temp = traveller_information[2].split(":");
	    traveller_information[2] = temp[1];

	    temp = traveller_information[3].split(":");
	    traveller_information[3] = temp[1];
	    
	    travellers.add(traveller_information);
	    occurrences.calculateOccurrences(travellers.get(index));
	    securityFactors.setNumberOfDays(occurrences.getNumberOfDays());
	    securityFactors.setNumberOfProhibitedItems(occurrences.getNumberOfProhibitedItems());
	    securityFactors.setNumberOfTravellers(occurrences.getNumberOfTravellers());
	    securityFactors.tightenOrLoosenSecurity();

	    results.resultOperations(securityFactors);
	    index++;
	}
	results.writeToFile();
    }
}