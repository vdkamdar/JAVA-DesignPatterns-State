package airportSecurityState.airportStates;

import airportSecurityState.util.MyLogger;

public class HighRiskState implements AirportStateI{
    private AirportSecurityFactors airportSecurityFactors = null;
    private float average_traffic = 0;
    private float average_prohibited_items = 0;

    public HighRiskState(AirportSecurityFactors airportSecurityFactors){
	this.airportSecurityFactors = airportSecurityFactors;
	MyLogger.writeMessage("HighRiskState instance is created", MyLogger.DebugLevel.CONSTRUCTOR);	
    }
    
    public void tightenOrLoosenSecurity(){

	average_traffic = airportSecurityFactors.getAverageTraffic();
	average_prohibited_items = airportSecurityFactors.getAverageProhibitedItems();
	//	System.out.println("AverageTraffic: "+average_traffic);
	//System.out.println("AverageProhibitedItems: "+average_prohibited_items);
	
	if(((0 <= average_traffic && average_traffic < 4) && (1 <= average_prohibited_items && average_prohibited_items < 2)) || ((4 <= average_traffic && average_traffic < 8) && (0 <= average_prohibited_items && average_prohibited_items < 1)) || (4 <= average_traffic && average_traffic < 8) && (1 <= average_prohibited_items && average_prohibited_items < 2)){
	    airportSecurityFactors.setState(airportSecurityFactors.getModerateRiskState());
	    MyLogger.writeMessage("State Changed to ModerateRiskState", MyLogger.DebugLevel.IN_RUN);	    
	    airportSecurityFactors.setCurrentState("moderate_risk_state");
	}
    }
}