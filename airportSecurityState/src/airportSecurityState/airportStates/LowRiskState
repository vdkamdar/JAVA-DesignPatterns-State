package airportSecurityState.airportStates;

import airportSecurityState.util.MyLogger;

public class LowRiskState implements AirportStateI{
    private AirportSecurityFactors airportSecurityFactors = null;
    private float average_traffic = 0;
    private float average_prohibited_items = 0;

    public LowRiskState(AirportSecurityFactors airportSecurityFactors){
	this.airportSecurityFactors = airportSecurityFactors;
	MyLogger.writeMessage("LowRiskState instance is created", MyLogger.DebugLevel.CONSTRUCTOR);	
    }
    
    public void tightenOrLoosenSecurity(){

	average_traffic = airportSecurityFactors.getAverageTraffic();
	average_prohibited_items = airportSecurityFactors.getAverageProhibitedItems();
	
		System.out.println("The airport is currently in low-risk state!");
		System.out.println("AverageTraffic: "+average_traffic);
		System.out.println("AveragePohibitedItems: "+average_prohibited_items);
	
	if((4 <= average_traffic && average_traffic < 8) || (1 <= average_prohibited_items && average_prohibited_items < 2)){
	    System.out.println("Change to moderate risk state-1");
	    airportSecurityFactors.setCurrentState("moderate_risk_state");
	    
	    airportSecurityFactors.setState(airportSecurityFactors.getModerateRiskState());
	}	
    }
}