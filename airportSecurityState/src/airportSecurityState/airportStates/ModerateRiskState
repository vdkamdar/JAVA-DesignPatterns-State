package airportSecurityState.airportStates;

public class ModerateRiskState implements AirportStateI{
    private AirportSecurityFactors airportSecurityFactors = null;
    private float average_traffic = 0;
    private float average_prohibited_items = 0;

    public ModerateRiskState(AirportSecurityFactors airportSecurityFactors){
	this.airportSecurityFactors = airportSecurityFactors;	 
    }
    
    public void tightenOrLoosenSecurity(){

	average_traffic = airportSecurityFactors.getAverageTraffic();
	 average_prohibited_items = airportSecurityFactors.getAverageProhibitedItems();
	
	System.out.println("The airport is currently in moderate-risk state!");

	System.out.println(average_traffic);
		System.out.println(average_prohibited_items);
	
		if((0 <= average_traffic && average_traffic < 4) && (0 <= average_prohibited_items && average_prohibited_items < 1)){
	    	    System.out.println("Change to low risk state-1");
		    airportSecurityFactors.setCurrentState("low_risk_state");

	    airportSecurityFactors.setState(airportSecurityFactors.getLowRiskState());
	}

	else if((average_traffic >= 8) || (average_prohibited_items >= 2)){
	    airportSecurityFactors.setState(airportSecurityFactors.getHighRiskState());
	    System.out.println("Change to high risk state-2");
	    airportSecurityFactors.setCurrentState("high_risk_state");
	}	
    }
}